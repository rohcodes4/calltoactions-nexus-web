
import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { Service } from '@/lib/supabase';
import { fetchServices, createService, updateService, deleteService } from '@/services/databaseService';
import ServiceForm from './ServiceForm';
import ServiceList from './ServiceList';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';

const ServicesAdmin = () => {
  const [editingService, setEditingService] = useState<Service | null>(null);
  const [isAdding, setIsAdding] = useState(false);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch services from database
  const { data: services = [], isLoading, error } = useQuery({
    queryKey: ['services'],
    queryFn: fetchServices
  });

  // Create service mutation
  const createMutation = useMutation({
    mutationFn: createService,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['services'] });
    }
  });

  // Update service mutation
  const updateMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: Partial<Service> }) => 
      updateService(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['services'] });
    }
  });

  // Delete service mutation
  const deleteMutation = useMutation({
    mutationFn: deleteService,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['services'] });
    }
  });

  const handleEdit = (service: Service) => {
    setEditingService({ ...service });
    setIsAdding(false);
  };

  const handleAdd = () => {
    // Changed: Remove the ID generation here since Supabase will generate the UUID
    const newService = {
      id: '', // Empty ID, will be generated by Supabase
      title: "",
      description: "",
      icon: "FileText",
      details: "",
      benefits: [""],
      image:""
    };
    setEditingService(newService);
    setIsAdding(true);
  };

  const handleSave = (service: Service) => {
    if (isAdding) {
      // For new services, don't include the id field
      const { id, ...serviceWithoutId } = service;
      createMutation.mutate(serviceWithoutId as Service);
    } else {
      updateMutation.mutate({ 
        id: service.id, 
        updates: service 
      });
    }
    setEditingService(null);
    setIsAdding(false);
  };

  const handleCancel = () => {
    setEditingService(null);
    setIsAdding(false);
  };

  const handleDelete = (id: string) => {
    const serviceToDelete = services.find(s => s.id === id);
    
    if (window.confirm(`Are you sure you want to delete "${serviceToDelete?.title}"?`)) {
      deleteMutation.mutate(id);
    }
  };

  if (isLoading) {
    return <div className="flex justify-center py-10">
      <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-agency-purple"></div>
    </div>;
  }

  if (error) {
    return <div className="text-red-500 p-4">
      Error loading services. Please try again later.
    </div>;
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-white">Services Management</h1>
          <p className="text-gray-400">Add, edit, or remove services from your website</p>
        </div>
        <Button 
          onClick={handleAdd}
          className="bg-gradient-to-r from-agency-purple to-agency-blue hover:from-agency-blue hover:to-agency-purple"
        >
          <Plus size={16} className="mr-2" />
          Add Service
        </Button>
      </div>

      {editingService ? (
        <Card className="glass-card p-6 mb-8">
          <h2 className="text-xl font-bold text-white mb-4">
            {isAdding ? "Add New Service" : "Edit Service"}
          </h2>
          
          <ServiceForm 
            isAdding={isAdding}
            editingService={editingService}
            onSave={handleSave}
            onCancel={handleCancel}
          />
        </Card>
      ) : null}

      <ServiceList 
        services={services}
        onEdit={handleEdit}
        onDelete={handleDelete}
      />
    </div>
  );
};

export default ServicesAdmin;
