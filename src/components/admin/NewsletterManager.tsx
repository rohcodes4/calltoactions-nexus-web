
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Plus, Edit, Trash2, Check, X } from 'lucide-react';
import { useToast } from '@/components/ui/use-toast';
import { NewsletterSubscription } from '@/lib/supabase';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { format } from 'date-fns';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { 
  fetchNewsletterSubscriptions, 
  createNewsletterSubscription, 
  updateNewsletterSubscription, 
  deleteNewsletterSubscription 
} from '@/services/databaseService';

const NewsletterManager = () => {
  const [isAdding, setIsAdding] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const [currentSubscription, setCurrentSubscription] = useState<NewsletterSubscription | null>(null);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  // Fetch subscriptions from the database
  const { data: subscriptions = [], isLoading, error } = useQuery({
    queryKey: ['newsletter-subscriptions'],
    queryFn: fetchNewsletterSubscriptions
  });

  // Create subscription mutation
  const createMutation = useMutation({
    mutationFn: createNewsletterSubscription,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['newsletter-subscriptions'] });
      toast({
        title: "Subscription Added",
        description: "The subscription has been added successfully"
      });
      setIsAdding(false);
      resetForm();
    }
  });

  // Update subscription mutation
  const updateMutation = useMutation({
    mutationFn: ({ id, updates }: { id: string; updates: Partial<NewsletterSubscription> }) => 
      updateNewsletterSubscription(id, updates),
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['newsletter-subscriptions'] });
      toast({
        title: "Subscription Updated",
        description: "The subscription has been updated successfully"
      });
      setIsEditing(false);
      resetForm();
    }
  });

  // Delete subscription mutation
  const deleteMutation = useMutation({
    mutationFn: deleteNewsletterSubscription,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['newsletter-subscriptions'] });
      toast({
        title: "Subscription Deleted",
        description: "The subscription has been deleted successfully"
      });
    }
  });

  const handleAddClick = () => {
    setCurrentSubscription({
      id: '',
      email: '',
      name: '',
      subscribed_at: new Date().toISOString(),
      status: 'active',
    });
    setIsAdding(true);
    setIsEditing(false);
  };

  const handleEditClick = (subscription: NewsletterSubscription) => {
    setCurrentSubscription({ ...subscription });
    setIsEditing(true);
    setIsAdding(false);
  };

  const handleDeleteClick = (id: string) => {
    if (confirm('Are you sure you want to delete this subscription?')) {
      deleteMutation.mutate(id);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!currentSubscription) return;
    
    if (isAdding) {
      // Remove the id for creation (it will be generated by the database)
      const { id, ...subscriptionData } = currentSubscription;
      createMutation.mutate(subscriptionData as Omit<NewsletterSubscription, 'id'>);
    } else if (isEditing && currentSubscription.id) {
      updateMutation.mutate({ 
        id: currentSubscription.id, 
        updates: currentSubscription 
      });
    }
  };

  const resetForm = () => {
    setCurrentSubscription(null);
    setIsAdding(false);
    setIsEditing(false);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    if (currentSubscription) {
      setCurrentSubscription({
        ...currentSubscription,
        [name]: value
      });
    }
  };

  if (isLoading) {
    return (
      <div className="flex justify-center py-10">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-agency-purple"></div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-red-500 p-4">
        Error loading newsletter subscriptions. Please try again later.
        {error instanceof Error && <div className="text-sm mt-2">{error.message}</div>}
      </div>
    );
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold text-white">Newsletter Subscriptions</h1>
          <p className="text-gray-400">Manage your newsletter subscribers</p>
        </div>
        <Button 
          onClick={handleAddClick}
          className="bg-gradient-to-r from-agency-purple to-agency-blue hover:from-agency-blue hover:to-agency-purple"
        >
          <Plus size={16} className="mr-2" />
          Add Subscriber
        </Button>
      </div>

      {(isAdding || isEditing) && currentSubscription && (
        <Card className="glass-card p-6 mb-8">
          <h2 className="text-xl font-bold text-white mb-4">
            {isAdding ? "Add New Subscriber" : "Edit Subscriber"}
          </h2>
          
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm text-gray-300 block mb-1">Email*</label>
                <input 
                  type="email" 
                  name="email"
                  value={currentSubscription.email || ''}
                  onChange={handleInputChange}
                  className="w-full p-2 rounded bg-white/10 border border-white/20 text-white"
                  placeholder="email@example.com"
                  required
                />
              </div>
              
              <div>
                <label className="text-sm text-gray-300 block mb-1">Name</label>
                <input 
                  type="text" 
                  name="name"
                  value={currentSubscription.name || ''}
                  onChange={handleInputChange}
                  className="w-full p-2 rounded bg-white/10 border border-white/20 text-white"
                  placeholder="John Doe"
                />
              </div>
            </div>
            
            <div>
              <label className="text-sm text-gray-300 block mb-1">Status</label>
              <select 
                name="status"
                value={currentSubscription.status}
                onChange={handleInputChange}
                className="w-full p-2 rounded bg-white/10 border border-white/20 text-white"
              >
                <option value="active">Active</option>
                <option value="unsubscribed">Unsubscribed</option>
              </select>
            </div>
            
            <div className="flex justify-end space-x-2">
              <Button 
                type="button"
                variant="outline" 
                onClick={resetForm}
              >
                Cancel
              </Button>
              
              <Button 
                type="submit"
                className="bg-gradient-to-r from-agency-purple to-agency-blue hover:from-agency-blue hover:to-agency-purple"
                disabled={createMutation.isPending || updateMutation.isPending}
              >
                {(createMutation.isPending || updateMutation.isPending) ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-t-2 border-b-2 border-white mr-2"></div>
                ) : (
                  <Check size={16} className="mr-2" />
                )}
                {isAdding ? "Add Subscriber" : "Update Subscriber"}
              </Button>
            </div>
          </form>
        </Card>
      )}

      <Card className="glass-card p-4 overflow-hidden">
        <div className="rounded-md border border-white/10 overflow-x-auto">
          <Table>
            <TableHeader className="bg-white/5">
              <TableRow className="hover:bg-white/5 border-white/10">
                <TableHead className="text-white w-1/3">Email</TableHead>
                <TableHead className="text-white">Name</TableHead>
                <TableHead className="text-white">Date</TableHead>
                <TableHead className="text-white">Status</TableHead>
                <TableHead className="text-white text-right">Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {subscriptions.map(subscription => (
                <TableRow key={subscription.id} className="hover:bg-white/5 border-white/10">
                  <TableCell className="font-medium text-white">
                    {subscription.email}
                  </TableCell>
                  <TableCell>
                    {subscription.name || '-'}
                  </TableCell>
                  <TableCell>
                    {subscription.subscribed_at ? format(new Date(subscription.subscribed_at), 'MMM d, yyyy') : '-'}
                  </TableCell>
                  <TableCell>
                    <span className={`px-2 py-1 rounded text-xs ${
                      subscription.status === 'active' 
                        ? 'bg-green-500/20 text-green-300' 
                        : 'bg-red-500/20 text-red-300'
                    }`}>
                      {subscription.status === 'active' ? 'Active' : 'Unsubscribed'}
                    </span>
                  </TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end space-x-1">
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => handleEditClick(subscription)}
                      >
                        <Edit size={16} />
                      </Button>
                      
                      <Button 
                        variant="ghost" 
                        size="sm"
                        onClick={() => handleDeleteClick(subscription.id)}
                        className="text-red-400 hover:text-red-300"
                      >
                        <Trash2 size={16} />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
              
              {subscriptions.length === 0 && (
                <TableRow>
                  <TableCell colSpan={5} className="text-center py-8 text-gray-400">
                    No subscriptions found. Click "Add Subscriber" to create one.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        </div>
      </Card>
    </div>
  );
};

export default NewsletterManager;
